[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = ['ddu.vim']
hook_add = '''
  nnoremap <silent> se <Cmd>Ddu junkfile -volatile<CR>
  if !isdirectory(expand('~/.cache/junkfile'))
    call mkdir(expand('~/.cache/junkfile'), 'p')
  endif
'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = v:true
  let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
'''

#[[plugins]]
#repo = 'Shougo/ddx.vim'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

# [[plugins]]
# repo = 'thinca/vim-qfreplace'
# on_ft = ['qf']
# [plugins.ftplugin]
# qf = '''
#   nnoremap <buffer> r <Cmd>Qfreplace<CR>
# '''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>ys <Plug>(operator-surround-append)
  nmap <silent>ds <Plug>(operator-surround-delete)a
  nmap <silent>cs <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>'
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Leader>J <Plug>(jplus-getchar)
  vmap <Leader>J <Plug>(jplus-getchar)
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
  require('indent_blankline').setup {
    show_current_context = true,
    show_current_context_start = true,
  }
EOF
'''

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

# [[plugins]]
# repo = 'mattn/vim-goimports'
# on_ft = 'go'
# hook_source = '''
#   let g:goimports_simplify = v:true
# '''

# [[plugins]]
# repo = 'dag/vim2hs'
# on_ft = 'haskell'
# hook_source = '''
# let g:haskell_conceal = v:false
# '''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim") && !has("win32")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
  require('nvim-treesitter.configs').setup {
    ensure_installed = 'all',
    ignore_install = { 'phpdoc' },
    additional_vim_regex_highlighting = false,
    highlight = {
      enable = true,
      disable = {'c', 'help'},
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = 'gnn',
        node_incremental = 'grn',
        scope_incremental = 'grc',
        node_decremental = 'grm',
      },
    },
    indent = {
      enable = true,
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
    },
    endwise = {
      enable = true,
    },
    autotag = {
      enable = true,
    },
    matchup = {
      enable = true,
    },
  }
EOF

" Enable syntax for non treesitter highlights
autocmd MyAutoCmd FileType c,help,gitcommit
\ if &l:syntax == '' | syntax enable | endif
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
depends = 'nvim-treesitter'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'RRethy/nvim-treesitter-endwise'
depends = 'nvim-treesitter'
on_ft = ['lua', 'ruby', 'sh', 'vim']

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
depends = 'nvim-treesitter'
on_ft = ['html', 'javascriptreact', 'typescriptreact', 'vue']

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = 'TSPlaygroundToggle'

[[plugins]]
repo = 'hrsh7th/vim-eft'
hook_source = '''
  let g:eft_ignorecase = v:true
'''
hook_add = '''
  nmap ;; <Plug>(eft-repeat)
  xmap ;; <Plug>(eft-repeat)
  nmap f <Plug>(eft-f)
  xmap f <Plug>(eft-f)
  omap f <Plug>(eft-f)
  nmap F <Plug>(eft-F)
  xmap F <Plug>(eft-F)
  omap F <Plug>(eft-F)
'''
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
hook_source = '''
lua <<EOF
  require('notify').setup({
    stages = 'fade',
  })
EOF
'''

[[plugins]]
repo = 'mattn/vim-notification'
if = '!has("nvim")'

[[plugins]]
repo = 'mattn/vim-treesitter'
build = 'cd server && go build'
if = '!has("nvim")'
#on_event = 'BufRead'

#[[plugins]]
#repo = 'github/copilot.vim'
#hook_source = '''
#let g:copilot_no_maps = v:true
#imap <script><silent><nowait><expr> <C-g> copilot#Accept()
#'''

# [[plugins]]
# repo = 'VonHeikemen/fine-cmdline.nvim'
# if = 'has("nvim")'
# depends = 'nui.nvim'
# on_lua = 'fine-cmdline'
# hook_add = '''
#   nnoremap <C-p> <Cmd>lua require'fine-cmdline'.setup({
#   \  cmdline = {
#   \    enable_keymaps = false
#   \  },
#   \  popup = {
#   \    buf_options = {
#   \      filetype = 'FineCmdlinePrompt'
#   \    },
#   \  },
#   \  hooks = {
#   \    before_mount = function(input)
#   \      input.input_props.prompt = ''
#   \    end,
#   \    set_keymaps = function(imap, feedkeys)
#   \      local fn = require('fine-cmdline').fn
#   \      imap('<Esc'..'>', fn.close)
#   \      imap('<C-c>', fn.close)
#   \      imap('jj', fn.close)
#   \      imap('<C-p>', fn.up_history)
#   \      imap('<C-n>', fn.down_history)
#   \    end,
#   \  },
#   \})<CR><Cmd>lua require('fine-cmdline').open()<CR>
# '''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
if = 'has("nvim")'
on_cmd = 'FuzzyMotion'
hook_add = '''
  nnoremap F   <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'tversteeg/registers.nvim'
depends = 'denops.vim'
if = 'has("nvim")'
on_map = '"'
hook_source = '''
  let g:registers_paste_in_normal_mode = 1
  let g:registers_hide_only_whitespace = 1
  let g:registers_show_empty_registers = 0
'''

[[plugins]]
repo = 'vimwiki/vimwiki'
on_map = '<Plug>Vimwiki'
hook_add = '''
  nmap <leader>ww <Plug>VimwikiIndex
'''
