[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Shirk/vim-gas'

[[plugins]]
repo = 'chrisbra/vim-zsh'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

# [[plugins]]
# repo = 'leafOfTree/vim-vue-plugin'
# hook_add = '''
#   let g:vim_vue_plugin_config = {
#     \'syntax': {
#     \    'template': ['html'],
#     \    'script': ['typescript'],
#     \    'style': ['css'],
#     \},
#     \'full_syntax': [],
#     \'initial_indent': [],
#     \'attribute': 0,
#     \'keyword': 0,
#     \'foldexpr': 0,
#     \'debug': 0,
#     \}
# '''

[[plugins]]
repo = 'rbtnn/vim-vimscript_indentexpr'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
  let g:AutoPairsFlyMode = 1
'''

[[plugins]]
repo = 'tpope/vim-scriptease'

[[plugins]]
repo = 'liuchengxu/space-vim-theme'
hook_add = '''
  if !exists('g:neovide') && !exists('g:nvui')
    let g:space_vim_transp_bg = 1
  endif
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  let g:matchup_surround_enabled = 1
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
hook_add = '''
  lua require('Comment').setup()
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
hook_add = '''
lua <<EOF
  require('nvim-web-devicons').setup {
    default = true,
  }
EOF
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap <silent>gx <Cmd>call GithubOrOpenBrowser('n')<CR>
  xmap <silent>gx <Cmd>call GithubOrOpenBrowser('v')<CR>

  function! GetGithubOwnerRepo(mode)
    " TODO: vimrc#get_last_selected doesn't return the right text
    " vimrc#get_in_quotes works just fine though, so this is low priority
    let selected = a:mode ==# 'n' ? vimrc#get_in_quotes() : vimrc#get_last_selected()
    let col = getcurpos()[2]
    if match(selected, '\c^[a-z0-9_.-]\+/[a-z0-9_.-]\+$') != -1 &&
          \ (a:mode ==# 'v' || (
          \ match(getline('.'), selected) < col &&
          \ matchend(getline('.'), selected) >= col - 1))
      return 'https://github.com/' . selected
    endif
    return ''
  endfunction

  " If hovering/selecting owner/repo, treat it as a github url
  function! GithubOrOpenBrowser(mode)
    let github_uri = GetGithubOwnerRepo(a:mode)
    if !empty(github_uri)
      call openbrowser#open(github_uri)
    else
      call openbrowser#_keymap_smart_search(a:mode)
    endif
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
  au FileType gitcommit let b:EditorConfig_disable = 1
'''

# TODO: GFM not working!!!
[[plugins]]
repo = 'preservim/vim-markdown'

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
  let g:signify_sign_add = '+'
  let g:signify_sign_delete = '_'
  let g:signify_sign_delete_first_line = 'â€¾'
  let g:signify_sign_change = '~'
  let g:signify_sign_change_delete = g:signify_sign_change . g:signify_sign_delete_first_line

  nnoremap <leader>gd <cmd>SignifyDiff<cr>
  nnoremap <leader>gp <cmd>SignifyHunkDiff<cr>
  nnoremap <leader>gu <cmd>SignifyHunkUndo<cr>

  omap ic <plug>(signify-motion-inner-pending)
  xmap ic <plug>(signify-motion-inner-visual)
  omap ac <plug>(signify-motion-outer-pending)
  xmap ac <plug>(signify-motion-outer-visual)
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
