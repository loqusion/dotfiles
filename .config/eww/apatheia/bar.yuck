(include "./notifications.yuck")

(defvar LAUNCHER_CMD "fuzzel")

(defpoll clock_time :interval "5s" "date '+\%H⁝\%M'")
(defpoll clock_date :interval "1h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "2h" "date '+%d'")
(defpoll calendar_year :interval "2h" "date '+%Y'")
(defpoll volume_percent :interval "1s" "scripts/sbvol --get")
; (defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -n 1")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Mono:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -n 1")
; (defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
; (defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll ESSID_WLAN :interval "100s" "nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2")
; (defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(defpoll WLAN_ICON :interval "100s" `nmcli -t -f SIGNAL,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)
(defpoll song           :interval "5s"  "scripts/music title")
(defpoll song_artist    :interval "5s"  "scripts/music artist")
(defpoll song_status    :interval "5s"  "scripts/music status")
(defpoll song_perc      :interval "1s"  "scripts/music percent")
(defpoll cover_art      :interval "5s"  "scripts/music coverloc")
(defpoll playpause      :interval "1s"  "scripts/music statusicon")
(defpoll player_volume  :interval "5s"  'bc <<< "$(playerctl volume)*100"')
;; (defpoll song_time      :interval "1s"  "scripts/music timeS")


;;; https://github.com/elkowar/eww/issues/382#issuecomment-1281693594

(defvar eww "eww -c $HOME/.config/hypr/themes/apatheia/eww/bar")

(defvar music_reveal false)
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar control_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)

;;; Toplevel

(defwidget bar []
  (centerbox
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right)))
(defwidget left []
  (box
    :class "left"
    :halign "start"
    :orientation "h"
    :space-evenly false
    (launcher)
    (sep)
    (workspaces)))
(defwidget center []
  (box
    :class "center"
    :halign "center"
    :orientation "h"
    :space-evenly false
    (appnames)))
(defwidget right []
  (box
    :class "right"
    :halign "end"
    :orientation "h"
    :space-evenly false
    (bright)
    (volume)
    ;; (wifi)
    ;; (sep)
    ;; (bat)
    ;; (mem)
    ;; (sep)
    (clock)
    (notif_button)))


;;; Utils

(defwidget sep []
  (box
    :class "sep"
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :valign "center"
      :text "|")))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))


;;; Bar Widgets

(defwidget launcher []
  (box
    :orientation "h"
    (button
      :onclick LAUNCHER_CMD ; FIXME: fuzzel pops in then immediately pops out
      (image
        :path "assets/blossom.png"
        :image-width 28))))

(defvar WORKSPACE_ICONS '["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"]')
(deflisten workspaces_json "scripts/workspaces.py")
(defwidget workspaces []
  (eventbox
    :onscroll "echo {} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace"
    (box
      :class "workspaces"
      :valign "center"
      :orientation "h"
      :spacing 12
      :space-evenly false
      (for id in "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        (workspace-button :id id)))))
(defwidget workspace-button [id]
  (button
    :class "workspace-button${matches(workspaces_json.workspaces, id) ? ' exists' : ''}${id == workspaces_json.focused ? ' focused' : ''}"
    :onclick "hyprctl dispatch workspace ${id}"
    :onrightclick "~/.config/hypr/scripts/workspace.sh ${id}"
    {WORKSPACE_ICONS[id - 1]}))

(deflisten appname "scripts/appname")
(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
    :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
        :content appname)
      (revealer
        :transition "slideright"
        :reveal control_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "true"
          (button
            :class "app-button"
            :onclick "hyprctl dispatch togglefloating 1" "")
          (button
            :class "app-button"
            :onclick "hyprctl dispatch fullscreen 1" "")
          (button ; use "eventbox" with : ":cursor pointer" for poiner cursor
            :class "app-button close-button"
            :cursor "pointer"
            :onclick "hyprctl dispatch killactive 1" ""))))))

(defpoll brightness_percent :interval "5s" "light")
(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update br_reveal=true"
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal br_reveal
        :duration "350ms"
        (scale
          :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
          :onchange "light -S {}"))
      (label
        :text ""
        :class "bright_icon"
        :tooltip "brightness"))))

(defwidget volume []
  (eventbox
    :onhover "${EWW_CMD} update vol_reveal=true"
    :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal vol_reveal
        :duration "350ms"
        (scale
          :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
          :onchange "amixer -D pulse sset Master {}%"))
      (button
        :onclick "scripts/pop audio_ctl"
        :class "volume_icon"
        "󰕾"))))

(defwidget wifi []
  (eventbox
    :onhover "${EWW_CMD} update wifi_rev=true"
    :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box
      :vexpand "false"
      :hexpand "false"
      :space-evenly "false"
      (revealer
        :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label
          :class "module_essid"
          :text ESSID_WLAN))
      (button
        :onclick "~/.config/hypr/scripts/exec_wofi wifi"
        ;  (_network :strength WLAN_ICON :offline "󰤮" :excellent "󰤨" :good "󰤥" :okay "󰤢" :slow "󰤟"
        (_network :strength WLAN_ICON :offline "󰖪" :excellent "" :good "" :okay "" :slow "")))))
(defwidget _network [strength offline excellent good okay slow]
  (label
    :class "module-wif"
    :text {strength == "" ? offline :
           strength < 26 ? slow :
           strength < 51 ? okay :
           strength < 76 ? good : excellent}))

(defwidget bat []
  (box
    :class "bat_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_BATTERY["BAT0"].capacity}
      :class "batbar"
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "iconbat"
        :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
        ""))))

(defwidget mem []
  (box
    :class "mem_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :class "membar"
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "iconmem"
        :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
        :show_truncated false
        :wrap false
        ""))))

(defwidget clock []
  (eventbox
    :onhover "${EWW_CMD} update time_rev=true"
    :onhoverlost "${EWW_CMD} update time_rev=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
        :class "clock_time_class")
      (revealer :transition "slideleft"
                :reveal time_rev
                :duration "350ms"
                (button
                  :class "clock_date_class"
                  :onclick "scripts/pop calendar" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
      :onclick "${EWW_CMD} update rightside=${!rightside}"
      (label :text ""))))
