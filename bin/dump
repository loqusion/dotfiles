#!/usr/bin/env bash

set -euo pipefail

progname="$(basename "$0")"
script_dir="$(dirname "$0")"

declare -a invalid_input
declare -a errors

supported=(
  brew
  npm
  pip
)

usage() {
  echo "Usage: ${progname} <package_manager>"
  echo "Supported Package Managers"
  print_all_supported
  echo "Or, pass 'all' to dump all of them"
} >&2

print_all_supported() {
  for s in "${supported[@]}"; do
    echo -e "\t${s}"
  done
}

is_supported() {
  local prog="$1"
  [ "$prog" = all ] && return 0
  for s in "${supported[@]}"; do
    if [ "$prog" = "$s" ]; then
      return 0
    fi
  done
  return 1
}

validate_args() {
  local status=0
  for prog in "$@"; do
    if ! is_supported "$prog"; then
      status=1
      invalid_input+=("$prog")
    fi
  done
  return $status
}

_dump() {
  local prog="$1"
  echo "Dumping ${prog}..."
  "${script_dir}/dump-${prog}.sh" >&2 ; local status="$?"
  echo "Finished dumping $prog"
  echo
  return "$status"
}

if [ $# -eq 0 ]; then
  usage
  exit 0
fi

validate_args "$@" || {
  usage
  echo
  echo "Invalid input: ${invalid_input[*]}"
  exit 1
} >&2

progs_to_dump=("$@")
for arg in "$@"; do
  if [ "$arg" = "all" ]; then
    progs_to_dump=("${supported[@]}")
    break
  fi
done

for prog in "${progs_to_dump[@]}"; do
  set +e; _dump "$prog"; status=$?; set -e
  if [ "$status" -ne 0 ]; then
    errors+=("$prog")
  fi
done

if [ "${#errors}" -gt 0 ]; then
  echo "Something went wrong!"
  exit 1
else
  echo "Done!"
fi >&2
